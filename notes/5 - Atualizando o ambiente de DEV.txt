Dev no autoscaling group:

basicamente deixando o main.tf do dev igual ao do prod, porem com menos recurso
e retornando um erro pois o arquivo ansible.sh nao esta dentro do ambiente de dev.

IF no terraform:

com a linha seguinte:

  user_data            = var.producao ? filebase64("ansible.sh") : ""

podemos enxergar um "IF" que se a variavel estiver retornando TRUE, ele ira 
carregar o arquivo ansible.sh e se for FALSE, nao acontecera nada. Assim quando
dermos apply no terraform ele nao retornara nenhum erro.

Multiplos recursos:

nem todos os recursos iram aceitar o "IF" e quando isso acontece podemos
utilizar o count para que o recurso seja ou nao criado conforme a variavel producao

exemplos:

no autoscaling_group

resource "aws_autoscaling_group" "grupo" {
  availability_zones = ["${var.regiao_aws}a", "${var.regiao_aws}b"]
  name               = var.nomeGrupo
  max_size           = var.maximo
  min_size           = var.minimo
  launch_template {
    id      = aws_launch_template.maquina.id
    version = "$Latest"
  }
  target_group_arns = var.producao ? [aws_lb_target_group.alvoLoadBalancer[0].arn] : []
}

na linha do target_group_arns, podemos observar o uso do IF, mas com uma adicao
no recurso do target, terminando com [0] isso siginifica pegara o valor da 
primeira posicao para validar a condicao e provisionar, isso se deve por conta do count


resource "aws_lb" "loadBalancer" {
  internal = false
  subnets  = [aws_default_subnet.subnet-1.id, aws_default_subnet.subnet-2.id]
  count    = var.producao ? 1 : 0
}

a mesma coisa ocorre aqui

resource "aws_lb_target_group" "alvoLoadBalancer" {
  name     = "maquinasAlvo"
  port     = "8000"
  protocol = "HTTP"
  vpc_id   = aws_default_vpc.default.id
  count    = var.producao ? 1 : 0
}

aqui tambem 

resource "aws_lb_listener" "entradaLoadBalancer" {
  load_balancer_arn = aws_lb.loadBalancer[0].arn
  port              = "8000"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.alvoLoadBalancer[0].arn
  }
  count = var.producao ? 1 : 0
}

aqui ja podemos oberservar o uso do count, onde esse recurso somente sera provisionado
se a variavel producao for TRUE, sendo TRUE o count tera o valor de 1, o que significa
que sera provisionado.

resource "aws_autoscaling_policy" "escala-Producao" {
  name                   = "terraform-escala"
  autoscaling_group_name = var.nomeGrupo
  policy_type            = "TargetTrackingScaling"
  target_tracking_configuration {
    predefined_metric_specification {
      predefined_metric_type = "ASGAverageCPUUtilization"
    }
    target_value = 50.0
  }
  count = var.producao ? 1 : 0
}

a mesma coisa ocorre aqui.

Criamos múltiplos recursos ao colocar a configuração count.
Acessamos os recursos utilizando o nome lógico seguido de um número entre [ ].
